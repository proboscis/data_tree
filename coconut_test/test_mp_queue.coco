from multiprocessing import Queue,Process,shared_memory,RawArray
import multiprocessing
import numpy as np
from loguru import logger
import pickle
import ctypes
class SMQueue:
    def __init__(self,queue):
        self._queue = queue

    def put(self,item):
        data = pickle.dumps(item)
        shm = shared_memory.SharedMemory(create=True,size=len(data)+4)
        data_size = len(data).to_bytes(4,"big")

        shm.buf[:4] = data_size
        shm.buf[4:4+len(data)] = data
        self._queue.put(shm)
        shm.close()

    def get(self):
        shm = self._queue.get()
        data_size =int.from_bytes(shm.buf[:4],"big")
        data = pickle.loads(shm.buf[4:4+data_size])
        shm.close()
        shm.unlink()
        return data

class SMQueue2: # unusable as a queue. RawArray cannot be put into queue
    def __init__(self,queue):
        self._queue = queue

    def put(self,item):
        data = pickle.dumps(item)
        shm = RawArray(ctypes.c_byte,data)
        #!c array should only be shared through inheritance.

        #shm = shared_memory.SharedMemory(create=True,size=len(data)+4)
        #data_size = len(data).to_bytes(4,"big")
        self._queue.put(shm)

    def get(self):
        shm = self._queue.get()
        data = pickle.loads(shm)
        return data


def inserter(q):
    #q = SMQueue(q) # using this queue is 10x faster
    ary = np.arange(10000*10000*3)
    for i in range(1000):
        q.put(ary)
        logger.info(f"put item:{i}")
    logger.info(f"enqueued everything")

def worker(q):
    #q = SMQueue(q)
    processed = 0
    while processed < 1000:
        item = q.get()
        processed += 1
        logger.info(f"got an item.:{processed}")
    logger.info(f"finished processing all items")

def test_mp_queue():
    #queue = Queue()
    #queue = Queue(10) # it just takes soo much time to 'get' large item
    queue = multiprocessing.Manager().Queue() #works, but cannot even put an object.
    _in = Process(target=inserter,args=(queue,))
    _work = Process(target=worker,args=(queue,))
    _in.start()
    _work.start()
    _work.join()
    _in.join()
