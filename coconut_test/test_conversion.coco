from data_tree.coconut.astar import astar
from loguru import logger
import numpy as np
import torch
from PIL import Image
from data_tree import auto_image
from data_tree.coconut.convert import Torch,Numpy,VR_0_1,ImageDef
from data_tree.coconut.convert import str_to_img_def,_conversions,_edges
from data_tree.coconut.astar import AStarSolver
start = str_to_img_def("numpy,float32,HWC,RGB,0_1")
end = str_to_img_def("torch,uint8,BHWC,RGB,0_255")
data END from ImageDef
data DUMMY from ImageDef
def dummy_rule(imdef):
    return [(a->a,end,1,"dummy")]

def dummy_rule2(node):
    paths = []
    case node:
        match DUMMY():
            paths += [(a->END,END(),1,"to_end")]
        match _ is ImageDef:
            paths += [(a->DUMMY,DUMMY(),1,"to_dummy")]

    return paths

def test_something():
    def neighbors(node):
        return [(a->a+"a",node + "a",1,"add_a")]
    def matcher(node):
        return node == "aaa"
    def heuristics(node):
        return 0
    astar(
        start = "a",
        matcher=matcher,
        neighbors=neighbors,
        heuristics=heuristics
    ).result |> log_conversion

def imdef_neighbors(imdef):
    return [(e.f,e.b,e.cost,e.name) for e in _edges(imdef)]

def test_new_astar():
    astar(
        start = start,
        matcher=d->d==end,
        neighbors = imdef_neighbors,
        heuristics=a->0
    ).result  |> log_conversion

def log_conversion(converter):
    path = [e.name for e in converter.edges]
    logger.info(path)



def test_astar_solver():


    solver=AStarSolver(
        rules = [imdef_neighbors]
    )
    solver.search_direct(start,end) |> log_conversion


    solver.add_rule(dummy_rule)
    solver.search_direct(start,end) |> log_conversion


def test_auto_image():
    x = np.zeros((100,100,3),dtype="float32")
    x = auto_image(x,start)
    x.converter(end) |> log_conversion
    x.solver.add_rule(dummy_rule)
    x.solver.add_rule(dummy_rule2)
    x.converter(end) |> log_conversion
    x.converter(END()) |> log_conversion
    x.reset_solver()

def test_non_batch_img_op():
    from data_tree.coconut.convert import AutoImage
    x = np.zeros((100,100),dtype="float32")

    start = "images,L,L" |> str_to_img_def
    end = "numpy,float32,HW,L,0_1" |> str_to_img_def
    auto_x = auto_image(x,"numpy,float32,HW,L,0_1")
    assert auto_x.image_op(.resize((256,256))).to(end).shape == (256,256),"image_op must work on non batched image"
    #AutoImage.solver.search_direct(start,end) |> log_conversion

def test_casting():
    from data_tree.coconut.omni_converter import SOLVER,cast_imdef_to_dict,cast_imdef_str_to_imdef
    logger.info(f"{cast_imdef_str_to_imdef('numpy,float32,HW,L,0_1')}")


def test_omni_converter():
    from data_tree.coconut.omni_converter import auto_img,cast_imdef_str_to_imdef,cast_imdef_to_imdef_str
    from data_tree.coconut.auto_data import AutoData
    x = np.ones((100,100,3),dtype="float32")
    auto_x:AutoData = auto_img("numpy,float32,HW,L,0_1")(x)
    assert (auto_x.to("numpy,float32,HW,L,0_255") == 255).all()
    assert (auto_x.to(v_range="0_255") == 255).all()
    _x = auto_x.to(dtype="uint8",v_range="0_255")
    assert (_x == 255).all(), f"original:{x},converted:{_x}"
    _x = auto_x.to(type="torch",dtype="uint8",v_range="0_255")
    assert (_x == 255).all(), f"original:{x},converted:{_x}"
    #logger.info(auto_x.convert(type="torch",dtype="uint8",v_range="0_255").format)
    #logger.info(auto_x.converter(type="torch",dtype="uint8",v_range="0_255"))
    #format = "numpy,float32,HW,L,0_1"
    #n_format = cast_imdef_str_to_imdef(format)[0]
    #assert format == n_format,f"{format} != {n_format}"

def test_tuple_conversion():
    from data_tree import auto
    from archpainter.experiments.rgba2xyz_mod.instances import torch_xyz, pix2pix_rgb_batch, TORCH_XYZ_BATCH
    logger.info(auto(("image,RGB,RGB","image,RGB,RGB"))((None,None)).converter(("pix2pix_batch,nc=1", TORCH_XYZ_BATCH)))

