from ply import lex
import ply.yacc as yacc

tokens = (
    'LPAREN',
    'RPAREN',
    'LSB',# left square bracket '['
    'RSB',# right square bracket ']'
    'COMMA',# ","
    'NAME',
    'STR',#'

)

t_ignore = ' \t'
t_STR = r"\'(\w*)\'"
t_NAME = r'([a-zA-Z_])\w*'
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_LSB = r'\['
t_RSB = r'\]'
t_COMMA = r'\,'

def t_error(t):
    print("Invalid Token:", t.value[0])
    t.lexer.skip(1)

lexer = lex.lex()

precedence = (
)

data ATuple(*items)
data AList(*items)

def p_str(p):
    """expr : STR"""
    p[0] = p[1]
def p_tuple(p):
    """expr : LPAREN exprs RPAREN"""
    p[0] = ATuple(*p[2])

def p_list(p):
    """expr : LSB exprs RSB"""
    p[0] = AList(*p[2])


def p_exprs(p):
    """exprs : expr COMMA exprs
             | expr COMMA
             | expr
    """
    if len(p) == 2:
        p[0] = [p[1]]
    elif len(p) == 3:
        p[0] = [p[1]]
    else:
        p[0] = [p[1]] + p[3]

def p_name(p):
    "expr : NAME"
    p[0] = p[1]

def p_error(p):
    print("Syntax error in input!")

parser = yacc.yacc()

res = parser.parse("('this is text')")  # the input

case res:
    #match ["a","b"]:
    #    print("great,it's list")
    match ("a","b"):
        print("hmm, is it tuple?")
print(res)