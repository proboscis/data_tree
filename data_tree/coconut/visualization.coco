import ipywidgets as widgets
from pprintpp import pformat,pprint
from PIL import Image
import PIL
from logzero import logger
import numpy as np
import pandas as pd
from typing import Iterable
nn = (none,func) -> func(none) if none is not None else None
L = Image.fromarray$(mode="L")
RGB = Image.fromarray$(mode="RGB")
RGBA = Image.fromarray$(mode="RGBA")
batch_image_to_image = ary->ary.transpose((1, 0, 2, 3)).reshape((ary.shape[2], -1, ary.shape[3]))
batch_L_to_img = ary->ary 
img_to_widget = value ->widgets.Box([widgets.Image(value=value._repr_png_(),format="png")])

from bqplot import pyplot as blt
from logzero import logger
data DummyType
try:
    import torch
    TensorType = torch.Tensor
except Exception as e:
    logger.warn(f"failed to load torch. no visualization for torch tensor.")
    TensorType = DummyType

def bqplot_hist(ary, title="histogram", bins=50):
    fig = blt.figure(title=title)
    blt.hist(ary.flatten(), bins=bins)
    fig.layout.width = "400px"
    fig.layout.height = "300px"
    return fig


def ary_to_image(value):
    if not value `isinstance` np.ndarray:
        return None        
    
    if value.dtype is not np.uint8:
        #logger.warning("automatically converting dtype {value.dtype} to uint8 for visualization")
        value = value.astype("uint8")
        
    case value.shape:
        match (bs,h,w,1): # batch of gray images
            return value.transpose(1,0,2,3).reshape(h,bs*w) |> L
        match (_,_,_,3): # batch of rgbs
            return value |> batch_image_to_image |> RGB
        match (_,_,_,4): # batch of rgbas
            return value |> batch_image_to_image |> RGBA
        match (_,_,1): # a gray image
            return value[:,:,0] |> L
        match (_,_,3): # an RGB image
            return value |> RGB
        match (_,_,4): # an RGBA image
            return value |> RGBA
        match (bs,h,w) if w>4: # batch of gray image
            return value.transpose(1,0,2).reshape(h,bs*w) |> L
        match (_,_): # gray image
            return value |> L
    else:
        return None

def ary_stat_widget(ary):
    return widgets.VBox([
        widgets.Label(value=pformat(str(dict(
            shape=ary.shape,
            dtype=ary.dtype
        )))),
        widgets.HTML(pd.DataFrame(pd.Series(ary.ravel()).describe()).transpose()._repr_html_())
    ])


def ary_to_widget(ary):
    stat_widget = ary_stat_widget(ary)
    viz_widget = ary_to_image(ary) `nn` img_to_widget
    viz_widget ??= widgets.Label(value=str(ary))

    children = [
        viz_widget,
        ary |> bqplot_hist,
        stat_widget
    ]
    return widgets.VBox(children)

def output_widget(value):
    out = widgets.Output()
    with out:
        pprint(repr(value))
    return out

def infer_widget(value):
    from data_tree._series import Series
    case value:
        match _ is Series:
            return value.widget()
        match _ is PIL.Image.Image:
            return value |> img_to_widget
        match _ is TensorType:
            return infer_widget(value.detach().numpy())
        match _ is np.ndarray:
            return ary_to_widget(value)
        match _ is tuple if value `hasattr` "_asdict":
            return value |> output_widget
        match _ is (tuple,list):
            items = [infer_widget(item) for item in value]
            return widgets.VBox([
                widgets.GridBox(items,layout=widgets.Layout(
                    grid_template_columns="auto auto auto",
                    border="solid 2px"
                )),
                widgets.Label(value=f"displaying tuple with {len(value)} elements")
            ])
    else:
        return value |> output_widget

